from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel, EmailStr, validator
from sqlmodel import Session, select
from .database import get_session
from .models import User
#from .producer import send_signup_message
#from passlib.context import CryptContext

auth_router = APIRouter()
#pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

class UserCreate(BaseModel):
    name: str
    company_name: str
    user_id: str
    email: EmailStr
    password: str
    confirmed_password: str

    @validator("confirmed_password")
    def passwords_match(cls, v, values, **kwargs):
        if "password" in values and v != values["password"]:
            raise ValueError("Passwords do not match")
        return v

class UserLogin(BaseModel):
    user_id: str
    password: str

def get_password_hash(password):
    return pwd_context.hash(password)

@auth_router.post("/signup")
async def signup(user: UserCreate, session: Session = Depends(get_session)):
    user.password = get_password_hash(user.password)
    db_user = session.exec(select(User).where(User.user_id == user.user_id)).first()
    if db_user:
        raise HTTPException(status_code=400, detail="UserID already exists")
    new_user = User(**user.dict(exclude={"confirmed_password"}))
    session.add(new_user)
    session.commit()
    send_signup_message(new_user.email, {"name": new_user.name})
    return {"message": "User created successfully"}

@auth_router.post("/login")
async def login(user: UserLogin, session: Session = Depends(get_session)):
    db_user = session.exec(select(User).where(User.user_id == user.user_id)).first()
    if not db_user or not pwd_context.verify(user.password, db_user.password):
        raise HTTPException(status_code=400, detail="Invalid credentials")
    return {"message": "Login successful"}
